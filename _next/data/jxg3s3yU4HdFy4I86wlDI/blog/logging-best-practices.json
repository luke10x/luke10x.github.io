{"pageProps":{"frontmatter":{"slug":"/blog/logging-best-practices","date":"2017-03-17T23:44:32+01:00","draft":false,"title":"Logging best practices","socialImage":"social-img/logging-practices.png"},"content":"\nLogs can be of different types and purposes, like error, audit and debug logs.\nTo work with them efficiently, we need to have certain tools and strategies.\nHere are several ideas how to use application logs more efficiently.  \n\n## 1. Consider about audit logging early\n\nEven if there is no specific business need for it,\nlike regulatory requirements, it can be useful for troubleshooting,\nand debugging. To implement an audit log in a clean way, it is necessary \nto consider about it at the early stages of the architectural design.\n[Domain Events](https://www.martinfowler.com/eaaDev/DomainEvent.html)\nshould be clearly separated and logged, at some cases even\n[Event Sourcing](https://www.martinfowler.com/eaaDev/EventSourcing.html)\ncould be used.\n\n## 2. Log Request ID and Correlation ID\n\nHTTP provides request headers X-Request-ID and X-Correlation-ID,\nalso comparable means can be used together with other protocols.\nEither generate it or make clients pass the request ID.\nUse same correlation ID in all downstream API calls.\nUsing them in the logs, would enable filtering and could help\nto search for related events.\n\n## 3. Include incident ID to the log messages \n\nWhen things go wrong, users should be given with enough information\nrequired to indicate what is the problem when they ask for support.\nExceptions should be logged, error message displayed to the user should\nindicate where the logs could be found.\nOf course there is no need to tell the user where the log file is stored,\nbut it is useful to generate the same hash - incident ID, and include it\nboth to the logged message and the one displayed for the user.\n\n## 4. Implement 0 Bugs policy\n\nAll messages from the error log are considered bugs and must be resolved immediately.\nLog monitoring here is essential, tools should support easy real time monitoring,\nwith ability to group and filter error messages. \nNoise should be removed from the error logs. When somebody is already looking at\nproduction issue, any messages related to that issue should not flood others.\n\n## 5. Define tolerance thresholds\n\nSome specific errors might only indicate problem when they occur continuously,\nfor example some remote service timeouts could be tolerated, if the don't\nreach a threshold per time interval.\nMonitoring tools should support a way to filter repeated messages that are\nwithin tolerance limits for that type of errors.\n"},"__N_SSG":true}