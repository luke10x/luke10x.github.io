{"pageProps":{"frontmatter":{"slug":"/blog/freeze-with-database-locks-using-expect","date":"2018-02-20T22:20:00+00:00","draft":false,"title":"Freeze WebApp with database locks (and automate it with Expect)","socialImage":"social-img/freeze.png"},"content":"Each PHP-FPM workers serve web requests relentlessly. \nSometimes it would be useful to pause a thread executing a \nspecific script, so that the whole worker process could be\nstopped for some time and examined, (and later released to run again if needed).\n\nIf that is a PHP app, setting a breakpoint in XDebug naturally\nfeels like a way to achieve that. Yet, XDebug is not always available,-\nin fact it is not recommended to run it on production\nenvironment at all.\n\nHowever, webapps typically talk to databases. If any PHP script,\nis trying to write to a database record which is locked by another transaction,\nthen it waits for the locking transaction to release the lock\n(which happens when transaction is committed or rolled back).\n\nStarting a transaction like this, but without ending it:\n\n\tmysql> START TRANSACTION;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql> UPDATE wp_posts SET post_content=\"Pending content...\" WHERE id=1;\n\tQuery OK, 1 row affected (0.00 sec)\n\tRows matched: 1  Changed: 1  Warnings: 0 \n\nwill result in write lock on the record. Therefore a PHP script \nwill be frozen when trying to write to that database record.\n\nAny web request that tries to write to the locked record,\nnow will be blocked by the database lock.\n\n[[[ Here comes the picture ]]]\n\n\n## But this is too much of typing...\n\nThe problem is that to lock a record in this way requires so much effort:\nfirst the transaction has to be started,\nthen the locking update query has to be executed,\nand this database connection has to be left as is,\nmeanwhile the stopped process can be scrutinized.\n\nAlso it is important to make sure the transaction is ended before disconnecting,\notherwise it will remain open until its timeout.\n\nTo spare some typing and window switching,\nthe interaction with the mysql client could be automated using Expect:\n\nFrom its man-page:\n\n    Expect is a program that \"talks\" to other interactive programs\n    according  to  a  script.   Following the script, Expect knows\n    what can be expected from  a  program  and  what  the  correct\n    response  should be.  An interpreted language provides branch‐\n    ing and high-level control structures to direct the  dialogue.\n    In  addition,  the user can take control and interact directly\n    when desired, afterward returning control to the script.\n\nWe will create an Expect script:\n\n    #!/usr/bin/expect\n\n    set timeout 105\n    trap {\n            send \"ROLLBACK;\\rEXIT\\r\"; expect -exact \"Bye\"; exit 0\n    } SIGINT\n\n    spawn docker exec -it enchantedlamp_mysql_1 sh -c \"exec mysql -uroot -p\\\"\\$MYSQL_ROOT_PASSWORD\\\" wordpress\"\n    expect -exact \"mysql>\"\n    send \"START TRANSACTION;\\r\"\n    expect -exact \"mysql>\"\n    send \"UPDATE wp_posts SET post_content='Pending content...' WHERE id=1;\\r\"\n    expect -exact \"mysql>\"\n\n    send_user \"RECORD BLOCKED FOR 100s (C^ FOR EARLY EXIT)\"\n    send \"\\r\"\n\n    sleep 100\n    expect -exact \"mysql>\"\n    send \"ROLLBACK;\\rEXIT\\r\"; expect -exact \"Bye\"; exit 0\n\nThis script can be run like `./block-record.exp`,\nit will give 100s for debugging the frozen state.\nIt can be exited earlier with Ctrl+C at any time though.\n\nhttps://www.thegeekstuff.com/2010/10/expect-examples/\n"},"__N_SSG":true}