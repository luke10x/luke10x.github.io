{"pageProps":{"frontmatter":{"slug":"/blog/install-debug-symbols-to-php-fpm-docker-container","date":"2018-06-18T23:24:52+00:00","draft":false,"title":"Install debug symbols to fpm Docker container","socialImage":"social-img/debug-symbols.png"},"content":"\nContainer images don't include debug symbols,\nperhaps it is more important to reduce size of the images.\n\nUnlike Debian that has all the <package>-dbg' packages\n(alternatively, it is possible to get <package>-dbgsym),\nDocker image vendors virtually never provide separate versions\nwith debug symbols enabled. Wordpress official images are\nnot exceptions.\n\nI can think of the following reasons why the vendors\nof the Docker container images don't consider\ninteractive debugging as a must-have feature anymore:\n\n- Debug symbols increase the image size;\n- The code runs in the cloud, that means does not matter where it\n  is actually running, so it is not clear how we can attach the \n  debugger;\n- Advanced paradigms, like async and coroutines make imperative\n  stepping through instructions a technique that gives good\n  insight of the runtime state.\n- Similarly, the machine code may be optimized in a sophisticated \n  way, so that throttling it to human speed would make it impossible\n  to reproduce bugs anyway.\n\nHowever PHP is quite old and primitive, therefore it can still\nbe the best to debug it with the good old GDB.\n\nHere, I will try to log, step-by-step what was required to do,\nin order to rebuild the image to include the debugging symbols at\nthe same time reusing as much as possible from the original image,\nand not rebuilding everything from scratch.\n\n## Assess the situation\n\nFirst we will double check that the debug symbols are not there originally:\n\n    root@63a355210d9b:/src# file /usr/local/sbin/php-fpm\n    /usr/local/sbin/php-fpm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=3a1b578d90a949925775c0827920ff4205ee16e3, stripped\n\nThat \"stripped\" means that the binary does not include the debugging data.\n(also this can be checked using the 'objdump --syms')\n\nSo debug symbols are not installed!\n\nAs the image is Debian based, we can check if the php is installed as a package,\nas that would allow us just to install additional php-fpm-dbg package:\n\n    root@63a355210d9b:/src# dpkg -S $(which php-fpm) \n    dpkg-query: no path found matching pattern /usr/local/sbin/php-fpm\n\nlooks like no, also:\n\n    apt-file find $(which php-fpm)\n\ndoes not print anything.\n\nSo it is clear that PHP is not installed from the APT package.\n\nNevertheless, checking the history, shows that indeed the message includes\nPHP compiled from sources:\n\n    docker history --no-trunc --format '{{.CreatedBy }}' wordpress:fpm\n    ...\n        /bin/sh -c set -xe  && buildDeps=\"   $PHP_EXTRA_BUILD_DEPS   libargon2-0-dev   libcurl4-openssl-dev   libedit-dev   libsqlite3-dev   libssl-dev   libxml2-dev   zlib1g-dev  \"  && apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/*   && export CFLAGS=\"$PHP_CFLAGS\"   CPPFLAGS=\"$PHP_CPPFLAGS\"   LDFLAGS=\"$PHP_LDFLAGS\"  && docker-php-source extract  && cd /usr/src/php  && gnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"  && debMultiarch=\"$(dpkg-architecture --query DEB_BUILD_MULTIARCH)\"  && if [ ! -d /usr/include/curl ]; then   ln -sT \"/usr/include/$debMultiarch/curl\" /usr/local/include/curl;  fi  && ./configure   --build=\"$gnuArch\"   --with-config-file-path=\"$PHP_INI_DIR\"   --with-config-file-scan-dir=\"$PHP_INI_DIR/conf.d\"     --disable-cgi     --enable-ftp   --enable-mbstring   --enable-mysqlnd   --with-password-argon2     --with-curl   --with-libedit   --with-openssl   --with-zlib     $(test \"$gnuArch\" = 's390x-linux-gnu' && echo '--without-pcre-jit')   --with-libdir=\"lib/$debMultiarch\"     $PHP_EXTRA_CONFIGURE_ARGS  && make -j \"$(nproc)\"  && make install  && { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; }  && make clean  && cd /  && docker-php-source delete   && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $buildDeps   && pecl update-channels  && rm -rf /tmp/pear ~/.pearrc\n    ...\n\nSo we will need to find the [original Dockerfile](https://github.com/docker-library/php/blob/6677546d599d3980781b520f84d03ecaad291dd1/7.2/stretch/fpm/Dockerfile#L104-L166),\nto see what command needs to be re-run for our custom image to include the symbols.\n\nWe will have to put [our Dockerfile](https://github.com/normantas/enchanted-lamp/blob/master/docker/wordpress/Dockerfile#L45-L46),\nthat recompiles the PHP with `--enable-debug` flag set.\n\nAfter the installation we need to rebuild plugins required for the Wordpress with [docker-php-ext-install](https://github.com/normantas/enchanted-lamp/blob/master/docker/wordpress/Dockerfile#L61-L69).\n\nAnd that is it! After rebuilding this image one should see:\n\n    file /usr/local/sbin/php-fpm\n    /usr/local/sbin/php-fpm: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=4f0f0802b93f011a3d1faa92be7e2c0d8646f78a, not stripped\n\nMeaning that our image now can be debugged with GDB!\n\n\n\n\n\n\n\n\n\n\n\n\n"},"__N_SSG":true}